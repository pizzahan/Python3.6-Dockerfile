#!/usr/local/bin/python3
# coding=utf-8

import sys
import getopt

import logging
import traceback
import configparser
import time
import signal

from FileLock import FileLock
import FileReader
import KafkaSender


def display_help():
    print("log2kafka.py -c config [-s start time]")
    print("             -s 2015-10-10-11 start with the begin of file  ${prefix}2015-10-10-11${suffix}")
    print("                if not use -s , will get start time and offset from prog file")


class Config:
    # 文件源
    fileDir = ""
    prefix = ""
    suffix = ""
    timeFmt = ""
    rollMinute = 0
    progress = ""
    # 发送规则
    passCondition = ""
    ignore = 0
    keyField = 0
    # kafka
    hosts = ""
    topic = ""
    topicNum = 64
    maxTime = 0
    maxNum = 0
    reconnectinterval = 1800
    sleepPer5sec = 0  # 秒
    retries = 1
    sendTime = 1000  # ms
    sendSize = 1048576  # 1M
    requestSize = 28000000
    username = ""
    passward = ""
    minHash = 0
    maxHash = 100
    # 日志
    logFile = ""

    def __init__(self, icf):
        self.__cf = icf
        self.maxSize = 0

    def parser(self):
        try:
            self.fileDir = self.__cf.get("file", "dir")
            self.prefix = self.__cf.get("file", "prefix")
            self.suffix = self.__cf.get("file", "suffix")
            self.timeFmt = self.__cf.get("file", "timeFmt")
            self.rollMinute = int(self.__cf.get("file", "rollMinute"))
            self.progress = self.__cf.get("file", "progress")
            self.passCondition = self.__cf.get("regulation", "passCondition")
            self.ignore = int(self.__cf.get("regulation", "ignore"))
            self.keyField = int(self.__cf.get("regulation", "keyField"))
            self.hosts = self.__cf.get("kafka", "hosts")
            self.topic = self.__cf.get("kafka", "topic")
            self.topicNum = int(self.__cf.get("kafka", "topicNum"))
            self.maxTime = int(self.__cf.get("kafka", "maxTime"))
            self.maxNum = int(self.__cf.get("kafka", "maxNum"))
            self.maxSize = int(self.__cf.get("kafka", "maxSize"))
            self.retries = int(self.__cf.get("kafka", "retries"))
            self.sendTime = int(self.__cf.get("kafka", "sendTime"))
            self.sendSize = int(self.__cf.get("kafka", "sendSize"))
            self.requestSize = int(self.__cf.get("kafka", "requestSize"))
            self.username = self.__cf.get("kafka", "username")
            self.passward = self.__cf.get("kafka", "passward")
            self.minHash = int(self.__cf.get("kafka", "minHash"))
            self.maxHash = int(self.__cf.get("kafka", "maxHash"))
            self.reconnectinterval = int(self.__cf.get("kafka", "reconnectinterval"))
            self.sleepPer5sec = int(self.__cf.get("kafka", "sleepPer5sec"))
            self.logFile = self.__cf.get("logger", "file")

        except Exception as e:
            s = traceback.format_exc()
            logging.error(e)
            logging.error(s)
            return False


sender = ""


def stop(n, e):
    logging.info("get signal {0}, will stop".format(n))
    print(e)
    sender.stop()


if __name__ == '__main__':
    config = ""
    start = ""
    opts, args = getopt.getopt(sys.argv[1:], "hc:s:")
    for op, value in opts:
        if op == "-c":
            config = value
        elif op == "-s":
            start = value
        elif op == "-h":
            display_help()
            sys.exit()

    if config == "":
        config = "./conf/log2kafka.conf"

    cf = configparser.RawConfigParser()
    cf.read(config)
    config = Config(cf)
    config.parser()

    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)s %(asctime)s [%(filename)s:%(lineno)d] %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        filename=config.logFile,
                        filemode='a')

    fileReader = FileReader.FileReader(config.progress, config.fileDir, config.prefix, config.suffix, config.timeFmt,
                                       config.rollMinute)

    if not fileReader.open(start):
        logging.error("FileReader open file failed")
        sys.exit(1)

    sender = KafkaSender.KafkaSender(config.hosts, config.topic, config.topicNum, config.keyField, fileReader,
                                     config.maxTime, config.maxNum, config.maxSize,
                                     config.passCondition, config.ignore, config.reconnectinterval, config.sleepPer5sec,
                                     config.username, config.passward, config.requestSize, config.retries,
                                     config.sendTime, config.sendSize, config.minHash, config.maxHash)
    signal.signal(signal.SIGTERM, stop)
    signal.signal(signal.SIGINT, stop)
    with FileLock("./lock"):
        sender.run()

    time.sleep(1)
    sys.exit(0)
